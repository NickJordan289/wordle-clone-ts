# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: app-wordle-multiplayer-dev-001 # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "./frontend" # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: "16.x" # set this to the node version to use
  AZURE_FUNCTIONAPP_NAME: func-wordle-multiplayer-dev  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "./backend" # set this to the path to your function app project, defaults to the repository root
  TERRAFORM_DIR_PATH: "./terraform"
  ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
  ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
  ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    environment:
      name: "Production"
      
    steps:
      - uses: actions/checkout@v3
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        
      - run: | 
          echo $GITHUB_PATH  
      
      - run: |
          echo "/usr/bin/" >> $GITHUB_PATH
          
      - run: |
          echo "/usr/bin/" >> $PATH
          
      - run: | 
          echo $GITHUB_PATH
      
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
         
      - name: Azure PowerShell Action
        uses: Azure/powershell@v1
        with:
          inlineScript: Get-AzVM -ResourceGroupName "wordle-multiplayer"
          azPSVersion: 3.1.0
         
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.TERRAFORM_DIR_PATH }}
          args: '-backend-config "access_key=${{secrets.TF_VAR_BACKEND_KEY}}"'

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.TERRAFORM_DIR_PATH }}

      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.TERRAFORM_DIR_PATH }}

      - name: Terraform Apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.TERRAFORM_DIR_PATH }}

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1

      - name: 'Resolve Project Dependencies Using Dotnet'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        shell: pwsh
        run: |
          dotnet build --configuration Release --output ./output
          
        # Zip artifacts to speed things up
      - name: Zip artifact for deployment
        shell: pwsh
        run: |
          Compress-Archive -Path ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output/* -DestinationPath backend-release.zip

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: func-app
          path: backend-release.zip
  
  deploy-backend:
    needs: [build-backend,deploy-infra]
    runs-on: ubuntu-latest
    environment:
      name: "Production"
      
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: func-app
    
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: backend-release.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: npm install, build, and test
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        run: |
          npm install
          npm run build
          
      # Zip artifacts to speed things up
      - name: Zip artifact for deployment
        run: zip release.zip ./${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/* -qr

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: release.zip

  deploy-frontend:
    needs: [build-frontend,deploy-infra]
    runs-on: ubuntu-latest
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: "Production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: release.zip
